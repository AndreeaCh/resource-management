<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.volunteering</groupId>
    <artifactId>resource-management</artifactId>
    <version>0.0.3-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>resource-management</name>
    <description>Application for Resource Management</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>

        <disable.docker.plugin>false</disable.docker.plugin>

       <!--docker build related properties-->
        <dockerSourceDirectory>${project.basedir}/src/main/docker</dockerSourceDirectory>
        <dockerOutputDirectory>${project.build.directory}/rootfs</dockerOutputDirectory>
        <nsisSourceDirectory>${project.basedir}/src/main/nsis</nsisSourceDirectory>

        <win.native.source>${project.basedir}/deploy/windows-native</win.native.source>
        <win.native.build.directory>${project.build.directory}/win-native</win.native.build.directory>

        <win.native.resources>${project.build.directory}/winres</win.native.resources>

        <frontend.groupId>${project.groupId}</frontend.groupId>
        <frontend.artifactId>${project.artifactId}-client</frontend.artifactId>
        <frontend.version>${project.version}</frontend.version>

        <backend.image.name>isu/${project.artifactId}-backend</backend.image.name>
        <backend.image.alias>backend</backend.image.alias>
        <backend.docker.image.filename>${backend.image.alias}-docker-image.tar.gz</backend.docker.image.filename>

        <frontend.image.name>isu/${project.artifactId}-frontend</frontend.image.name>
        <frontend.image.alias>frontend</frontend.image.alias>
        <frontend.docker.image.filename>${frontend.image.alias}-docker-image.tar.gz</frontend.docker.image.filename>

        <db.image.name>isu/${project.artifactId}-db</db.image.name>
        <db.image.alias>mongodb</db.image.alias>
        <db.docker.image.filename>${db.image.alias}-docker-image.tar.gz</db.docker.image.filename>

        <auth.image.name>isu/${project.artifactId}-auth</auth.image.name>
        <auth.image.alias>auth</auth.image.alias>
        <auth.docker.image.filename>${auth.image.alias}-docker-image.tar.gz</auth.docker.image.filename>

        <version.docker-maven-plugin>0.25.0</version.docker-maven-plugin>
        <version.buildnumber-maven-plugin>1.4</version.buildnumber-maven-plugin>
    </properties>

    <pluginRepositories>
        <pluginRepository>
            <id>MojoHaus</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
           <!--<snapshots>-->
           <!--<enabled>true</enabled>-->
           <!--</snapshots>-->
           <!--<releases>-->
           <!--<enabled>true</enabled>  &lt;!&ndash; Workaround for MNG-2974, see note below &ndash;&gt;-->
           <!--</releases>-->
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
       <!--        <dependency>
                   <groupId>de.flapdoodle.embed</groupId>
                   <artifactId>de.flapdoodle.embed.mongo</artifactId>
                   <scope>test</scope>
               </dependency>-->
       <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>com.github.librepdf</groupId>
            <artifactId>openpdf</artifactId>
            <version>1.2.8</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>4.0.1</version>
        </dependency>
    </dependencies>

    <build>
        <!--remove filter, production properties shall not be used here-->
        <filters>
            <filter>deploy/windows-native/production.application.properties</filter>
        </filters>
        <resources>
            <!--<resource>-->
                <!--<directory>src/main/resources-filtered</directory>-->
                <!--<includes>-->
                    <!--<include>log4j2.properties</include>-->
                <!--</includes>-->
                <!--<filtering>true</filtering>-->
            <!--</resource>-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>logback-spring.xml</exclude>
                    <exclude>application.properties</exclude>
                    <exclude>fonts/*</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>fonts/*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M2</version>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <configuration>
                            <rules>
                                <dependencyConvergence/>
                            </rules>
                        </configuration>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

           <!--fetch backend and frontend distributables from maven repository-->
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!--scope:docker-->
                    <execution>
                        <id>copy backend assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dockerOutputDirectory}/backend</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <overWrite>true</overWrite>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy frontend assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dockerOutputDirectory}/frontend</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${frontend.groupId}</groupId>
                                    <artifactId>${frontend.artifactId}</artifactId>
                                    <version>${frontend.version}</version>
                                    <classifier>bin</classifier>
                                    <overWrite>true</overWrite>
                                    <type>tar.gz</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy keycloak realm files for docker</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dockerOutputDirectory}/auth</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${frontend.groupId}</groupId>
                                    <artifactId>${frontend.artifactId}</artifactId>
                                    <version>${frontend.version}</version>
                                    <classifier>bin</classifier>
                                    <overWrite>true</overWrite>
                                    <type>tar.gz</type>
                                    <includes>realm-export.json</includes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <!--scope:windows-native-->
                    <execution>
                        <id>copy keycloak realm files for windows native</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${win.native.build.directory}/auth</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${frontend.groupId}</groupId>
                                    <artifactId>${frontend.artifactId}</artifactId>
                                    <version>${frontend.version}</version>
                                    <classifier>bin</classifier>
                                    <overWrite>true</overWrite>
                                    <type>tar.gz</type>
                                    <includes>realm-export.json</includes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy backend assembly for windows native deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${win.native.build.directory}/bin</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <overWrite>true</overWrite>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack frontend assembly for windows native deploy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${win.native.build.directory}</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${frontend.groupId}</groupId>
                                    <artifactId>${frontend.artifactId}</artifactId>
                                    <version>${frontend.version}</version>
                                    <classifier>bin</classifier>
                                    <overWrite>true</overWrite>
                                    <type>tar.gz</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <stripVersion>true</stripVersion>
                </configuration>
            </plugin>


            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.4.2</version>
                <executions>
                    <execution>
                        <id>fetch-keycloak-archive</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://downloads.jboss.org/keycloak/8.0.0/keycloak-8.0.0.zip</url>
                            <!--NO UNPACKING TO BE DONE HERE SO THE ARCHIVE IS CACHED-->
                            <outputDirectory>${win.native.source}</outputDirectory>
                            <sha1>d07ae0afa4cb76fe96fd096bb52eab1fc7a043be</sha1>
                        </configuration>
                    </execution>
                    <execution>
                        <id>fetch-mongodb-kit</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.16-signed.msi</url>
                            <!--NO UNPACKING TO BE DONE HERE SO THE ARCHIVE IS CACHED-->
                            <outputDirectory>${win.native.source}</outputDirectory>
                            <sha1>31c022f2f2a8e104b4fdb9b573b2fc9f1e7201dc</sha1>
                        </configuration>
                    </execution>
                    <execution>
                        <id>fetch-java-kit</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://cdn.azul.com/zulu/bin/zulu11.37.17-ca-jdk11.0.6-win_x64.msi</url>
                            <!--NO UNPACKING TO BE DONE HERE SO THE ARCHIVE IS CACHED-->
                            <outputDirectory>${win.native.source}</outputDirectory>
                            <sha1>58f975c54ab160446b74f471fcdf2d0179bdaa22</sha1>
                        </configuration>
                    </execution>
                    <execution>
                        <id>fetch-nodejs-kit</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://nodejs.org/download/release/v10.15.0/node-v10.15.0-x64.msi</url>
                            <!--NO UNPACKING TO BE DONE HERE SO THE ARCHIVE IS CACHED-->
                            <outputDirectory>${win.native.source}</outputDirectory>
                            <sha1>7f4a13d1bf09dab24a08ec7981a10458fd945344</sha1>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <configuration>
                            <tasks>
                                <echo message="unzipping keycloak" />
                                <unzip src="${win.native.source}/keycloak-8.0.0.zip" dest="${win.native.build.directory}/auth" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

           <!--copy resource files-->
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
                <executions>
                    <!--scope:docker-->
                    <execution>
                        <id>copy docker files</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dockerOutputDirectory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${dockerSourceDirectory}</directory>
                                    <targetPath>${dockerOutputDirectory}</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${project.build.sourceDirectory}/../resources</directory>
                                    <targetPath>${dockerOutputDirectory}/db/fillDb</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*.json</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <!--scope:windows-native-->
                    <execution>
                        <id>copy windows native resource files</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${win.native.build.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${win.native.source}</directory>
                                    <targetPath>${win.native.build.directory}/setup</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>install_instructions.md</include>
                                        <include>setup.bat</include>
                                        <include>set_execution_policy.bat</include>
                                        <include>install_chocolatey.bat</include>
                                        <include>install_chocolatey.ps1</include>
                                        <include>install_java.bat</include>
                                        <include>install_db.bat</include>
                                        <include>install_node.bat</include>
                                        <include>install_app.bat</include>
                                        <include>uninstall.bat</include>
                                        <include>uninstall_tools.bat</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${win.native.source}</directory>
                                    <targetPath>${win.native.build.directory}/run</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>production.application.properties</include>
                                        <include>production.log4j2.properties</include>
                                        <include>run_instructions.md</include>
                                        <include>easymanage.bat</include>
                                        <include>run_auth.bat</include>
                                        <include>start.bat</include>
                                        <include>stop.bat</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${win.native.source}</directory>
                                    <targetPath>${win.native.build.directory}/msi</targetPath>
                                    <includes>
                                        <include>mongodb-win32-x86_64-2008plus-ssl-4.0.16-signed.msi</include>
                                        <include>zulu11.37.17-ca-jdk11.0.6-win_x64.msi</include>
                                        <include>node-v10.15.0-x64.msi</include>
                                    </includes>
                                </resource>
                                <!--<resource>-->
                                    <!--<directory>${win.native.source}</directory>-->
                                    <!--<targetPath>${win.native.build.directory}/auth</targetPath>-->
                                    <!--<includes>-->
                                        <!--<include>keycloak-8.0.0.zip</include>-->
                                    <!--</includes>-->
                                <!--</resource>-->
                                <resource>
                                    <directory>${nsisSourceDirectory}</directory>
                                    <targetPath>${win.native.build.directory}</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*.nsi</include>
                                        <include>**/*.nsh</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}</directory>
                                    <targetPath>${win.native.build.directory}/run</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>fillDb.bat</include>
                                        <include>deploy.bat</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}/deploy/chocolatey</directory>
                                    <targetPath>${win.native.build.directory}/chocolatey</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>*.ps1</include>
                                        <include>*.cmd</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${project.build.sourceDirectory}/../resources</directory>
                                    <targetPath>${win.native.build.directory}/fillDb</targetPath>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*.json</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

           <!--building docker images-->
           <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${version.docker-maven-plugin}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>build docker images</id>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <images>
                                <image>
                                    <alias>${backend.image.alias}</alias>
                                    <name>${backend.image.name}</name>
                                    <build>
                                        <dockerFileDir>${dockerOutputDirectory}/backend</dockerFileDir>
                                    </build>
                                </image>
                                <image>
                                    <alias>${frontend.image.alias}</alias>
                                    <name>${frontend.image.name}</name>
                                    <build>
                                        <dockerFileDir>${dockerOutputDirectory}/frontend</dockerFileDir>
                                    </build>
                                </image>
                                <image>
                                    <alias>${db.image.alias}</alias>
                                    <name>${db.image.name}</name>
                                    <build>
                                        <dockerFileDir>${dockerOutputDirectory}/db</dockerFileDir>
                                    </build>
                                </image>
                                <image>
                                    <alias>${auth.image.alias}</alias>
                                    <name>${auth.image.name}</name>
                                    <build>
                                        <dockerFileDir>${dockerOutputDirectory}/auth</dockerFileDir>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>save backend docker image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>save</goal>
                        </goals>
                        <configuration>
                            <saveFile>${project.build.directory}/${backend.docker.image.filename}</saveFile>
                            <images>
                                <image>
                                    <alias>${backend.image.alias}</alias>
                                    <name>${backend.image.name}</name>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>save frontend docker image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>save</goal>
                        </goals>
                        <configuration>
                            <saveFile>${project.build.directory}/${frontend.docker.image.filename}</saveFile>
                            <images>
                                <image>
                                    <alias>${frontend.image.alias}</alias>
                                    <name>${frontend.image.name}</name>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>save db docker image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>save</goal>
                        </goals>
                        <configuration>
                            <saveFile>${project.build.directory}/${db.docker.image.filename}</saveFile>
                            <images>
                                <image>
                                    <alias>${db.image.alias}</alias>
                                    <name>${db.image.name}</name>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>save auth docker image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>save</goal>
                        </goals>
                        <configuration>
                            <saveFile>${project.build.directory}/${auth.docker.image.filename}</saveFile>
                            <images>
                                <image>
                                    <alias>${auth.image.alias}</alias>
                                    <name>${auth.image.name}</name>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${disable.docker.plugin}</skip>
                    <verbose>true</verbose>
                    <logStdout>true</logStdout>
                    <images>
                        <image>
                            <build>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>

           <!--building distributables-->
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>create windows native application bundle</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>assembly/windows-native/bin.xml</descriptor>
                            </descriptors>
                            <finalName>easy-manage-windows-native-bin</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create windows native install kit</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>assembly/windows-native/dist.xml</descriptor>
                            </descriptors>
                            <finalName>easy-manage-windows-native</finalName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create docker on linux application bundle</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>assembly/docker-on-linux/bin.xml</descriptor>
                            </descriptors>
                            <finalName>easy-manage-docker-on-linux-bin</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create docker on linux install kit</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>assembly/docker-on-linux/dist.xml</descriptor>
                            </descriptors>
                            <finalName>easy-manage-docker-on-linux</finalName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

           <!-- NSIS plugin for producing nsis installer -->
           <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>nsis-maven-plugin</artifactId>
                <version>1.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>generate-project</goal>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                           <setupScript>${win.native.build.directory}/easymanage.nsi</setupScript>
                           <outputFile>${project.build.directory}/EasyManage-${project.version}.exe</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>


   <profiles>
       <!--profiles for running docker build when docker is available on the system-->
      <profile>
            <id>linux</id>
           <properties>
               <disable.docker.plugin>true</disable.docker.plugin>
           </properties>
           <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
       </profile>
      <!--profiles for running the container using maven cli-->
      <profile>
            <id>db</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${version.docker-maven-plugin}</version>
                        <configuration>
                            <skip>${disable.docker.plugin}</skip>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${db.image.name}</name>
                                    <alias>${db.image.alias}</alias>
                                    <run>
                                        <namingStrategy>alias</namingStrategy>
                                        <hostname>${env.HOSTNAME}</hostname>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <restartPolicy>
                                            <name>on-failure</name>
                                            <retry>3</retry>
                                        </restartPolicy>
                                        <memory>1024000000</memory>
                                        <memorySwap>-1</memorySwap>
                                        <extraHosts>
                                            <host>localhosts:127.0.0.1</host>
                                        </extraHosts>
                                        <cmd>demo</cmd>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>auth</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${version.docker-maven-plugin}</version>
                        <configuration>
                           <skip>${disable.docker.plugin}</skip>
                           <verbose>true</verbose>
                           <logStdout>true</logStdout>
                           <images>
                               <image>
                                   <name>${auth.image.name}</name>
                                   <alias>${auth.image.alias}</alias>
                                   <run>
                                       <namingStrategy>alias</namingStrategy>
                                       <hostname>${env.HOSTNAME}</hostname>
                                       <ports>
                                            <port>8180:8080</port>
                                            <port>9990:9990</port>
                                       </ports>
                                       <restartPolicy>
                                           <name>on-failure</name>
                                           <retry>3</retry>
                                       </restartPolicy>
                                       <memory>1024000000</memory>
                                       <memorySwap>-1</memorySwap>
                                       <extraHosts>
                                           <host>localhosts:127.0.0.1</host>
                                       </extraHosts>
                                       <env>
                                           <KEYCLOAK_USER>admin</KEYCLOAK_USER>
                                           <KEYCLOAK_PASSWORD>admin</KEYCLOAK_PASSWORD>
                                           <KEYCLOAK_IMPORT>/tmp/realm-export.json</KEYCLOAK_IMPORT>
                                       </env>
                                   </run>
                               </image>
                           </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>apps</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${version.docker-maven-plugin}</version>
                        <configuration>
                            <skip>${disable.docker.plugin}</skip>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${backend.image.name}</name>
                                    <alias>${backend.image.alias}</alias>
                                    <run>
                                        <namingStrategy>alias</namingStrategy>
                                        <hostname>${env.HOSTNAME}</hostname>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <restartPolicy>
                                            <name>on-failure</name>
                                            <retry>3</retry>
                                        </restartPolicy>
                                        <memory>1024000000</memory>
                                        <memorySwap>-1</memorySwap>
                                        <extraHosts>
                                            <host>localhosts:127.0.0.1</host>
                                        </extraHosts>
                                        <volumes>
                                            <bind>
                                                <volume>${project.basedir}/logs:/home/container/logs</volume>
                                                <volume>${project.basedir}/deploy/docker-on-linux/production.application.properties:/home/container/config/application.properties</volume>
                                                <volume>${project.basedir}/deploy/docker-on-linux/production.log4j2.properties:/home/container/config/log4j2.properties</volume>
                                            </bind>
                                        </volumes>
                                    </run>
                                </image>
                                <image>
                                    <name>${frontend.image.name}</name>
                                    <alias>${frontend.image.alias}</alias>
                                    <run>
                                        <skip>${disable.docker.plugin}</skip>
                                        <namingStrategy>alias</namingStrategy>
                                        <hostname>${env.HOSTNAME}</hostname>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <restartPolicy>
                                            <name>on-failure</name>
                                            <retry>3</retry>
                                        </restartPolicy>
                                        <memory>1024000000</memory>
                                        <memorySwap>-1</memorySwap>
                                        <extraHosts>
                                            <host>localhosts:127.0.0.1</host>
                                        </extraHosts>
                                        <env>
                                            <SERVER_ADDRESS>gugustiuc.go.ro</SERVER_ADDRESS>
                                        </env>
                                        <volumes>
                                            <bind>
                                                <volume>${project.basedir}/logs:/home/container/logs</volume>
                                            </bind>
                                        </volumes>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
